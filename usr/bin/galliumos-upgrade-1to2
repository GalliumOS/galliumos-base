#!/bin/sh
#
# Usage: galliumos-upgrade-1to2 --this-is-experimental-and-might-break
#
# WARNING: this is an experimental process, truly.
#
# Don't try it unless you're prepared to restore from a backup. 
# After _very_ sparse testing from a fresh 1.0 install, it does
# seem to be functional, but more testing is required.
#
# There have been reports of outright failures (all seem to be due
# to peculiar APT configs, which we now try to be more careful of),
# but the larger concern is that some package might update partially,
# leaving some traces of old, invalid, or broken config which might
# cause difficult to debug problems in the future. No evidence of
# this being a practical issue at this time, however.
#

set -e

BASE_PKG="https://galliumos.org/keep/galliumos-base_2.0.9_all.deb"
MAGIC_ARG="--this-is-experimental-and-might-break"
APT_PRESERVE="/var/cache/apt/sources-all.vivid"

fatal() { echo "$0: fatal: $*"; exit 1; }
avail() { echo $(stat -f --printf="%a * %s / 1024 / 1024\n" / | bc); }

## must be root, have 2GB disk available, and use the magic arg
[ "$(id -u)" = "0" ] ||      fatal "requires root privileges"
[ "$(avail)" -gt "2048" ] || fatal "requires 2GB available disk space"
[ "$1" = "$MAGIC_ARG" ] ||   fatal "requires magic arg on command line"
[ "$(dpkg -l galliumos-desktop 2>/dev/null)" ] || fatal "galliumos-desktop is not installed, upgrade would fail"

## check for other package sources that might cause problems:
##   known good:  galliumos, ubuntu
##   probably OK: chrome, steam
##   untested:    wine, skype, etc etc
APT_SRCS=$(grep -h "^deb" /etc/apt/sources.list /etc/apt/sources.list.d/*)
APT_ADD=$(echo "$APT_SRCS" | grep -vi galliumos.org | grep -vi ubuntu.com)

if [ "$APT_ADD" ]; then
  echo
  echo "WARNING: you have additional package sources configured:"
  echo
  echo "$APT_ADD" | sed 's/^/  /'
  echo
  echo "Packages from these sources might require manual update or reinstall."
  echo "Current config will be preserved in ${APT_PRESERVE}."
  echo
  echo "Press [Enter] to continue, or [Ctrl+C] to cancel: \c"
  read cr
fi

echo "$APT_SRCS" > "$APT_PRESERVE"

## ok, here we go...

## disable opt repodists so we don't have lingering vivid artifacts
galliumos-repodist --disable prerelease
galliumos-repodist --disable testing

## get the new pkg with updated repodist config
echo
echo "Fetching and installing new galliumos-base package..."
curl --progress-bar -o /tmp/galliumos-base.deb "$BASE_PKG"
dpkg -i /tmp/galliumos-base.deb

echo
echo "Updating package sources for GalliumOS 2.0..."
## preserve /etc/apt/sources.list in case of manually-added PPAs etc
cp /etc/apt/sources.list /etc/apt/sources.list.vivid
## convert ubuntu.com sources from vivid to xenial
sed -i "s/^\(deb..*\.ubuntu\.com\/ubuntu\/*\) vivid/\1 xenial/" /etc/apt/sources.list

## remove any lingering galliumos-vivid config
sed -i "/galliumos.org/d" /etc/apt/sources.list
rm -f /etc/apt/trusted.gpg.d/galliumos-vivid.gpg 
rm -f /etc/apt/sources.list.d/galliumos-vivid.list

echo
echo "Preparing to upgrade..."
## remove problematic pkgs
set +e
apt-get -y remove libjpeg-progs libjpeg-turbo-progs
## stop xscreensaver to squelch msg
killall xscreensaver
set -e

echo
echo "Updating package manifests and installing updated packages..."
## update manifests, do the needful
apt-get update
set +e
apt-get -y --force-yes dist-upgrade

if [ "$?" != "0" ]; then
  cat <<EOF

$0: There have been errors!

  If the error messages above don't look too serious, it should be
  safe to continue. You may also choose to cancel and clean things
  up manually.

  There are two steps remaining. If you choose to cancel here, be
  sure to run these manually after cleanup.

    apt-get autoremove  ## remove old packages
    apt-get clean       ## clear package cache, reclaim disk space

EOF
  echo "Press [Enter] to continue, or [Ctrl+C] to cancel: \c"
  read cr
fi

echo
echo "Removing old packages..."
## OK so far. Here's where it might get sketchy with odd pkg srcs,
## but there's no way to be sure so we just plunge ahead forthwith.
apt-get -y autoremove
apt-get clean

## and we're done
echo
echo "$0: Finished. Time to reboot and see how well it worked!"
